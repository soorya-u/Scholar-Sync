// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Announcement struct {
	ID        string    `json:"id"`
	Nexus     *Nexus    `json:"nexus"`
	Title     string    `json:"title"`
	Message   string    `json:"message"`
	SentBy    *Profile  `json:"sentBy"`
	TimeStamp time.Time `json:"timeStamp"`
}

type Core struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	Creator   *Profile  `json:"creator"`
	Nexus     []*Nexus  `json:"nexus,omitempty"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type File struct {
	ID        string    `json:"id"`
	Title     string    `json:"title"`
	FileURL   string    `json:"fileUrl"`
	SentBy    *Profile  `json:"sentBy"`
	Nexus     *Nexus    `json:"nexus"`
	TimeStamp time.Time `json:"timeStamp"`
}

type LoginData struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Mutation struct {
}

type Nexus struct {
	ID            string          `json:"id"`
	Name          string          `json:"name"`
	Core          *Core           `json:"core"`
	Creator       *Profile        `json:"creator"`
	Files         []*File         `json:"files,omitempty"`
	Announcements []*Announcement `json:"announcements,omitempty"`
	CreatedAt     time.Time       `json:"createdAt"`
	UpdatedAt     time.Time       `json:"updatedAt"`
}

type Profile struct {
	ID          string      `json:"id"`
	FullName    string      `json:"fullName"`
	Email       string      `json:"email"`
	ProfileType ProfileType `json:"profileType"`
	CreatedAt   time.Time   `json:"createdAt"`
}

type Query struct {
}

type SignUpData struct {
	FullName string `json:"fullName"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type ProfileType string

const (
	ProfileTypeAdmin       ProfileType = "ADMIN"
	ProfileTypePseudoadmin ProfileType = "PSEUDOADMIN"
	ProfileTypeNormal      ProfileType = "NORMAL"
)

var AllProfileType = []ProfileType{
	ProfileTypeAdmin,
	ProfileTypePseudoadmin,
	ProfileTypeNormal,
}

func (e ProfileType) IsValid() bool {
	switch e {
	case ProfileTypeAdmin, ProfileTypePseudoadmin, ProfileTypeNormal:
		return true
	}
	return false
}

func (e ProfileType) String() string {
	return string(e)
}

func (e *ProfileType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProfileType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProfileType", str)
	}
	return nil
}

func (e ProfileType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
