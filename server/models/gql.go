// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
)

type Announcement struct {
	ID        string    `json:"id"`
	Title     string    `json:"title"`
	Message   string    `json:"message"`
	SentBy    *Profile  `json:"sentBy"`
	TimeStamp time.Time `json:"timeStamp"`
}

type AnnouncementData struct {
	Title   string `json:"title"`
	Message string `json:"message"`
	Nexus   string `json:"nexus"`
}

type Core struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	ImageURL  string    `json:"imageUrl"`
	Creator   *Profile  `json:"creator"`
	Nexus     []*Nexus  `json:"nexus"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type CoreData struct {
	Name     string `json:"name"`
	ImageURL string `json:"imageUrl"`
}

type File struct {
	ID          string    `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	FileURL     string    `json:"fileUrl"`
	SentBy      *Profile  `json:"sentBy"`
	TimeStamp   time.Time `json:"timeStamp"`
}

type FileData struct {
	Title       string         `json:"title"`
	Description string         `json:"description"`
	Upload      graphql.Upload `json:"upload"`
	Nexus       string         `json:"nexus"`
}

type GetNexusData struct {
	Core string `json:"core"`
}

type LoginData struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Mutation struct {
}

type Nexus struct {
	ID            string          `json:"id"`
	Name          string          `json:"name"`
	Category      string          `json:"category"`
	Creator       *Profile        `json:"creator"`
	Users         []*Profile      `json:"users"`
	Files         []*File         `json:"files"`
	Announcements []*Announcement `json:"announcements"`
	CreatedAt     time.Time       `json:"createdAt"`
	UpdatedAt     time.Time       `json:"updatedAt"`
}

type NexusData struct {
	Core     string `json:"core"`
	Name     string `json:"name"`
	Category string `json:"category"`
}

type Profile struct {
	ID        string      `json:"id"`
	FullName  string      `json:"fullName"`
	Email     string      `json:"email"`
	UserType  ProfileType `json:"userType"`
	CreatedAt time.Time   `json:"createdAt"`
}

type Query struct {
}

type SignUpData struct {
	FullName string `json:"fullName"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type ProfileType string

const (
	ProfileTypeAdmin       ProfileType = "ADMIN"
	ProfileTypePseudoadmin ProfileType = "PSEUDOADMIN"
	ProfileTypeNormal      ProfileType = "NORMAL"
)

var AllProfileType = []ProfileType{
	ProfileTypeAdmin,
	ProfileTypePseudoadmin,
	ProfileTypeNormal,
}

func (e ProfileType) IsValid() bool {
	switch e {
	case ProfileTypeAdmin, ProfileTypePseudoadmin, ProfileTypeNormal:
		return true
	}
	return false
}

func (e ProfileType) String() string {
	return string(e)
}

func (e *ProfileType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProfileType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProfileType", str)
	}
	return nil
}

func (e ProfileType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
