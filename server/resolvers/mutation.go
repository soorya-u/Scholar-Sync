package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"

	"github.com/soorya-u/scholar-sync/generated"
	"github.com/soorya-u/scholar-sync/handlers"
	"github.com/soorya-u/scholar-sync/helpers"
	"github.com/soorya-u/scholar-sync/models"
)

func (r *mutationResolver) SignUp(ctx context.Context, input models.SignUpData) (string, error) {
	token, err := handlers.SignUpHandler(r.Db, input)
	if err != nil {
		return "", err
	}

	err = helpers.SetValueToCookie(&ctx, token)
	if err != nil {
		return "", err
	}

	return token, nil
}

func (r *mutationResolver) CreateCore(ctx context.Context, input models.CoreData) (string, error) {
	userId, err := helpers.GetUserIdFromCookie(&ctx)
	if err != nil {
		return "", nil
	}

	return handlers.CreateCoreHandler(r.Db, input, userId)
}

func (r *mutationResolver) DeleteCore(ctx context.Context, coreID string) (bool, error) {
	userId, err := helpers.GetUserIdFromCookie(&ctx)
	if err != nil {
		return false, err
	}

	return handlers.DeleteCoreHandler(r.Db, coreID, userId)
}

func (r *mutationResolver) InviteMemberToCore(ctx context.Context, input models.CoreMember) (bool, error) {
	panic(fmt.Errorf("not implemented: InviteMemberToCore - inviteMemberToCore"))
}

func (r *mutationResolver) RemoveMemberFromCore(ctx context.Context, input models.CoreMember) (bool, error) {
	userId, err := helpers.GetUserIdFromCookie(&ctx)
	if err != nil {
		return false, err
	}

	return handlers.RemoveMemberFromCoreHandler(r.Db, userId, input.UserID, input.CoreID)
}

func (r *mutationResolver) LeaveCore(ctx context.Context, coreID string) (bool, error) {
	userId, err := helpers.GetUserIdFromCookie(&ctx)
	if err != nil {
		return false, err
	}

	return handlers.LeaveCoreHandler(r.Db, coreID, userId)
}

func (r *mutationResolver) CreateNexus(ctx context.Context, input models.NexusData) (string, error) {
	userId, err := helpers.GetUserIdFromCookie(&ctx)
	if err != nil {
		return "", err
	}

	return handlers.CreateNexusHandler(r.Db, input.Name, userId, input.CoreID, input.Category)
}

func (r *mutationResolver) DeleteNexus(ctx context.Context, nexusID string) (bool, error) {
	userId, err := helpers.GetUserIdFromCookie(&ctx)
	if err != nil {
		return false, err
	}

	return handlers.DeleteNexusHandler(r.Db, nexusID, userId)
}

func (r *mutationResolver) InviteMemberToNexus(ctx context.Context, input models.NexusMember) (bool, error) {
	panic(fmt.Errorf("not implemented: InviteMemberToNexus - inviteMemberToNexus"))
}

func (r *mutationResolver) RemoveMemberFromNexus(ctx context.Context, input models.NexusMember) (bool, error) {
	userId, err := helpers.GetUserIdFromCookie(&ctx)
	if err != nil {
		return false, err
	}

	return handlers.RemoveMemberFromNexusHandler(r.Db, userId, input.UserID, input.NexusID)
}

func (r *mutationResolver) LeaveNexus(ctx context.Context, nexusID string) (bool, error) {
	userId, err := helpers.GetUserIdFromCookie(&ctx)
	if err != nil {
		return false, err
	}

	return handlers.LeaveNexusHandler(r.Db, userId, nexusID)
}

func (r *mutationResolver) CreateAnnouncement(ctx context.Context, input models.AnnouncementData) (string, error) {
	userId, err := helpers.GetUserIdFromCookie(&ctx)
	if err != nil {
		return "", err
	}
	return handlers.CreateAnnouncementHandler(r.Db, input.Title, input.Message, input.NexusID, userId)
}

func (r *mutationResolver) CreateFile(ctx context.Context, input models.FileData) (string, error) {
	userId, err := helpers.GetUserIdFromCookie(&ctx)
	if err != nil {
		return "", err
	}

	return handlers.CreateFileHandler(r.Db, input.Upload, input.Title, input.Description, input.NexusID, userId)
}

func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
